// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using R_StudioAPI.Data;

#nullable disable

namespace R_StudioAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240620064445_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FavouritePost", b =>
                {
                    b.Property<long>("FavouriteId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostsId")
                        .HasColumnType("bigint");

                    b.HasKey("FavouriteId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("FavouritePost");
                });

            modelBuilder.Entity("FavouriteUser", b =>
                {
                    b.Property<long>("Favourite1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("Favourite1Id", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FavouriteUser");
                });

            modelBuilder.Entity("FavouriteVideo", b =>
                {
                    b.Property<long>("FavouriteId")
                        .HasColumnType("bigint");

                    b.Property<long>("VideosId")
                        .HasColumnType("bigint");

                    b.HasKey("FavouriteId", "VideosId");

                    b.HasIndex("VideosId");

                    b.ToTable("FavouriteVideo");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.Property<long>("LikedPostsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LikedPostsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostUser");
                });

            modelBuilder.Entity("R_StudioAPI.Models.Commentary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CommentatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VideoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentatorId");

                    b.HasIndex("PostId");

                    b.HasIndex("VideoId");

                    b.ToTable("Commentaries");
                });

            modelBuilder.Entity("R_StudioAPI.Models.Favourite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("R_StudioAPI.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("R_StudioAPI.Models.PostMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostMedias");
                });

            modelBuilder.Entity("R_StudioAPI.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("R_StudioAPI.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FavouriteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistratedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("R_StudioAPI.Models.Video", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("Likes")
                        .HasColumnType("bigint");

                    b.Property<long>("Rating")
                        .HasColumnType("bigint");

                    b.Property<long>("RatingCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("UserVideo", b =>
                {
                    b.Property<long>("HistoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("HistoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserVideo");
                });

            modelBuilder.Entity("UserVideo1", b =>
                {
                    b.Property<long>("LikedVideosId")
                        .HasColumnType("bigint");

                    b.Property<long>("User1Id")
                        .HasColumnType("bigint");

                    b.HasKey("LikedVideosId", "User1Id");

                    b.HasIndex("User1Id");

                    b.ToTable("UserVideo1");
                });

            modelBuilder.Entity("UserVideo2", b =>
                {
                    b.Property<long>("ActorsId")
                        .HasColumnType("bigint");

                    b.Property<long>("VideoId")
                        .HasColumnType("bigint");

                    b.HasKey("ActorsId", "VideoId");

                    b.HasIndex("VideoId");

                    b.ToTable("UserVideo2");
                });

            modelBuilder.Entity("FavouritePost", b =>
                {
                    b.HasOne("R_StudioAPI.Models.Favourite", null)
                        .WithMany()
                        .HasForeignKey("FavouriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_StudioAPI.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FavouriteUser", b =>
                {
                    b.HasOne("R_StudioAPI.Models.Favourite", null)
                        .WithMany()
                        .HasForeignKey("Favourite1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_StudioAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FavouriteVideo", b =>
                {
                    b.HasOne("R_StudioAPI.Models.Favourite", null)
                        .WithMany()
                        .HasForeignKey("FavouriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_StudioAPI.Models.Video", null)
                        .WithMany()
                        .HasForeignKey("VideosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.HasOne("R_StudioAPI.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("LikedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_StudioAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("R_StudioAPI.Models.Commentary", b =>
                {
                    b.HasOne("R_StudioAPI.Models.User", "Commentator")
                        .WithMany()
                        .HasForeignKey("CommentatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_StudioAPI.Models.Post", "Post")
                        .WithMany("Commentaries")
                        .HasForeignKey("PostId");

                    b.HasOne("R_StudioAPI.Models.Video", "Video")
                        .WithMany("Commentaries")
                        .HasForeignKey("VideoId");

                    b.Navigation("Commentator");

                    b.Navigation("Post");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("R_StudioAPI.Models.Favourite", b =>
                {
                    b.HasOne("R_StudioAPI.Models.User", "User")
                        .WithOne("Favourite")
                        .HasForeignKey("R_StudioAPI.Models.Favourite", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("R_StudioAPI.Models.Post", b =>
                {
                    b.HasOne("R_StudioAPI.Models.User", "Author")
                        .WithMany("MyPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("R_StudioAPI.Models.PostMedia", b =>
                {
                    b.HasOne("R_StudioAPI.Models.Post", "Post")
                        .WithMany("Media")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("R_StudioAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_StudioAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserVideo", b =>
                {
                    b.HasOne("R_StudioAPI.Models.Video", null)
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_StudioAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserVideo1", b =>
                {
                    b.HasOne("R_StudioAPI.Models.Video", null)
                        .WithMany()
                        .HasForeignKey("LikedVideosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_StudioAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserVideo2", b =>
                {
                    b.HasOne("R_StudioAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("R_StudioAPI.Models.Video", null)
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("R_StudioAPI.Models.Post", b =>
                {
                    b.Navigation("Commentaries");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("R_StudioAPI.Models.User", b =>
                {
                    b.Navigation("Favourite")
                        .IsRequired();

                    b.Navigation("MyPosts");
                });

            modelBuilder.Entity("R_StudioAPI.Models.Video", b =>
                {
                    b.Navigation("Commentaries");
                });
#pragma warning restore 612, 618
        }
    }
}
